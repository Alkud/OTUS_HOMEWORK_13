var searchData=
[
  ['acceptor',['acceptor',['../class_async_acceptor.html#ab4e39fdc446ad743956edf19e1dbd112',1,'AsyncAcceptor::acceptor()'],['../class_async_reader.html#a2ba13225c852752f2f449568d41950c5',1,'AsyncReader::acceptor()']]],
  ['acceptorstopped',['acceptorStopped',['../class_async_join_server.html#a938ee1bd9c5730251a00d9edd554ce8e',1,'AsyncJoinServer::acceptorStopped()'],['../class_async_join_server.html#a8ede00733bb0ea526ca8331f23f9dc1e',1,'AsyncJoinServer::acceptorStopped()']]],
  ['accesslock',['accessLock',['../class_db_manager.html#ac9dac33b31f682bed2dd05c63b3a71b5',1,'DbManager']]],
  ['activereadercount',['activeReaderCount',['../class_async_acceptor.html#aceeb1b385ef65d2202d8a7f94f59868f',1,'AsyncAcceptor']]],
  ['addprocessingthreads',['addProcessingThreads',['../class_db_manager.html#aafc009daf0d1e2f69be5dd982a008645',1,'DbManager']]],
  ['address',['address',['../class_async_acceptor.html#abc9041a8777d9b5c7151e14720d87a24',1,'AsyncAcceptor']]],
  ['adoptdb',['adoptDb',['../class_db_manager.html#a93c1a302a471af79f5bb9828093db89b',1,'DbManager']]],
  ['alias_5fduplicate',['ALIAS_DUPLICATE',['../naive__db_8h.html#a243bfbd0913496b2566f63d0486035f0a3a089f1db70910ec939206a4a7aa86e7',1,'naive_db.h']]],
  ['alias_5fnot_5ffound',['ALIAS_NOT_FOUND',['../naive__db_8h.html#a243bfbd0913496b2566f63d0486035f0a1c519a8300206ccb7b3579fe2f0c986c',1,'naive_db.h']]],
  ['appterminationflag',['appTerminationFlag',['../class_async_join_server.html#a111f59fd495e28c6f8f620d2eb3c8efe',1,'AsyncJoinServer::appTerminationFlag()'],['../class_async_join_server.html#a7d5945cddb3238836f44dcbfbd88e8d6',1,'AsyncJoinServer::appTerminationFlag()']]],
  ['appterminationnotifier',['appTerminationNotifier',['../class_async_join_server.html#a68f85d0199b13c213223fe7e41935d1b',1,'AsyncJoinServer::appTerminationNotifier()'],['../class_async_join_server.html#ac97268004d78357d1d3fb30409a534d9',1,'AsyncJoinServer::appTerminationNotifier()']]],
  ['async_5facceptor_2ecpp',['async_acceptor.cpp',['../async__acceptor_8cpp.html',1,'']]],
  ['async_5facceptor_2eh',['async_acceptor.h',['../async__acceptor_8h.html',1,'']]],
  ['async_5freader_2ecpp',['async_reader.cpp',['../async__reader_8cpp.html',1,'']]],
  ['async_5freader_2eh',['async_reader.h',['../async__reader_8h.html',1,'']]],
  ['async_5fserver_2eh',['async_server.h',['../async__server_8h.html',1,'']]],
  ['asyncacceptor',['AsyncAcceptor',['../class_async_acceptor.html',1,'AsyncAcceptor'],['../class_async_join_server.html#aa67d220c7c20f9245787777497c231b8',1,'AsyncJoinServer::asyncAcceptor()'],['../class_async_acceptor.html#ae7669ef046d5a402ba71df736974cba8',1,'AsyncAcceptor::AsyncAcceptor()=delete'],['../class_async_acceptor.html#adb35eadba257fd82d84516a176548b38',1,'AsyncAcceptor::AsyncAcceptor(const asio::ip::address_v4 newAddress, const uint16_t newPortNumber, const SharedService &amp;newNetService, const SharedService &amp;newRequestService, ServerRequestCallback newRequestCallback, std::condition_variable &amp;newTerminationNotifier, std::atomic&lt; bool &gt; &amp;newTerminationFlag, std::ostream &amp;newOutputStream, std::ostream &amp;newErrorStream, std::mutex &amp;newOutputLock)']]],
  ['asyncjoinserver',['AsyncJoinServer',['../class_async_join_server.html',1,'AsyncJoinServer&lt; workingThreadCount &gt;'],['../class_async_join_server.html#ab15949f303c75cb72f74be8f5847619a',1,'AsyncJoinServer::AsyncJoinServer()=delete'],['../class_async_join_server.html#a655c6980e6dcc2000284abf7a032a3e4',1,'AsyncJoinServer::AsyncJoinServer(const asio::ip::address_v4 newAddress, const uint16_t newPortNumber, std::ostream &amp;newOutputStream, std::ostream &amp;newErrorStream, std::atomic&lt; bool &gt; &amp;newAppTerminationFlag, std::condition_variable &amp;newAppTerminationNotifier)']]],
  ['asyncreader',['AsyncReader',['../class_async_reader.html',1,'AsyncReader'],['../class_async_reader.html#a682b4b02f98237f3742699a2a23b4d06',1,'AsyncReader::AsyncReader()=delete'],['../class_async_reader.html#af4b30a54f7a6ed8a76d74c6af0afca8c',1,'AsyncReader::AsyncReader(SharedSocket newSocket, asio::ip::tcp::acceptor &amp;newAcceptor, std::atomic&lt; size_t &gt; &amp;newReaderCounter, const SharedService &amp;newRequestService, ServerRequestCallback newRequestCallback, std::condition_variable &amp;newTerminationNotifier, std::mutex &amp;newTerminationLock, std::ostream &amp;newOutputStream, std::ostream &amp;newErrorStream, std::mutex &amp;newOutputLock, std::atomic&lt; bool &gt; &amp;stopFlag)']]]
];
